{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "58bee088-bf4e-4215-b269-0a5baca0174e",
   "metadata": {},
   "source": [
    "### Day 61 of Python Programmig"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b13fcda9-4298-4431-9ee0-a410c5b36c0b",
   "metadata": {},
   "source": [
    "## Tutorial: Check if a Given Number is an Emirp Number in Python\n",
    "An Emirp Number is a prime number that, when its digits are reversed, forms a different prime number. In other words, an Emirp number remains prime when reversed but doesn’t form a palindrome. For example, 13 and 31 are both prime, and they are not palindromes of each other, so they’re both considered Emirps.\n",
    "\n",
    "### Steps to Check if a Number is an Emirp\n",
    "Check if the number is a prime.\n",
    "\n",
    "Reverse the digits of the number.\n",
    "\n",
    "Check if the reversed number is also a prime.\n",
    "\n",
    "Ensure that the original number is not a palindrome (Emirps must be non-palindromic primes).\n",
    "\n",
    "### Code Implementation\n",
    "Let's break down the code to create a function that checks if a given number is an Emirp."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "49cf7353-32a0-44eb-8c6e-887739a2da02",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number to check if it's an Emirp:  79\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79 is an Emirp number.\n"
     ]
    }
   ],
   "source": [
    "# Function to check if a number is prime\n",
    "def is_prime(n):\n",
    "    if n <= 1:\n",
    "        return False\n",
    "    for i in range(2, int(n ** 0.5) + 1):\n",
    "        if n % i == 0:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "# Function to reverse a number\n",
    "def reverse_number(n):\n",
    "    return int(str(n)[::-1])\n",
    "\n",
    "# Function to check if a number is an Emirp\n",
    "def is_emirp(n):\n",
    "    # Check if the number itself is prime\n",
    "    if not is_prime(n):\n",
    "        return False\n",
    "\n",
    "    # Reverse the number\n",
    "    reversed_n = reverse_number(n)\n",
    "\n",
    "    # Check if the reversed number is prime and not equal to the original number\n",
    "    if reversed_n != n and is_prime(reversed_n):\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "# Testing the Emirp check function\n",
    "number = int(input(\"Enter a number to check if it's an Emirp: \"))\n",
    "\n",
    "if is_emirp(number):\n",
    "    print(f\"{number} is an Emirp number.\")\n",
    "else:\n",
    "    print(f\"{number} is not an Emirp number.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a9e2d0d-178e-4220-b9f3-e445abd458e2",
   "metadata": {},
   "source": [
    "### Explanation of the Code\n",
    "is_prime function: This function checks if a given number n is prime by testing divisibility from 2 up to the square root of n. If any number divides n, it returns False. If no divisors are found, it returns True.\n",
    "\n",
    "reverse_number function: This function reverses the digits of the number by converting it to a string, reversing it, and converting it back to an integer.\n",
    "\n",
    "#### is_emirp function: This main function performs the following steps:\n",
    "\n",
    "First, it checks if the number itself is a prime.\n",
    "\n",
    "It then reverses the number.\n",
    "\n",
    "Finally, it checks if the reversed number is prime and if it’s different from the original number."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "986ee85e-5599-4d31-9e3e-88b096e258e3",
   "metadata": {},
   "source": [
    "### In this example:\n",
    "\n",
    "13 is an Emirp because both 13 and 31 are primes.\n",
    "23 is also an Emirp because both 23 and 32 are primes.\n",
    "101 is not an Emirp because 101 reversed is 101 (a palindrome).\n",
    "### Summary\n",
    "In this tutorial, we learned how to check if a number is an Emirp by:\n",
    "\n",
    "Verifying its primality.\n",
    "\n",
    "Reversing it and checking the primality of the reversed number.\n",
    "    \n",
    "Ensuring the number is non-palindromic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71d571af-9884-4bbc-a837-1b56de4611aa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
